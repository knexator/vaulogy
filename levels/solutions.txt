planetFromOlympian {
    Hermes -> Mercury;
    Aphrodite -> Venus;
    Ares -> Mars;
    Zeus -> Jupiter;
    Kronos -> Saturn;
    Poseidon -> Neptune;
    Hades -> Pluto;
}

wrapOlympian {
    @olympian -> ((top . @olympian) . bottom);
}

planetFromWrappedOlympian {
    ((top . @olympian) . bottom) -> planetFromOlympian: @olympian;
}

wrappedPlanetFromOlympian {
    @olympian -> planetFromOlympian: @olympian {
        @planet -> ((top . @planet) . bottom);
    }
}

planetPairFromOlympianPair {
    (@olympian_1 . @olympian_2) -> planetFromOlympian: @olympian_1 {
        @planet_1 -> planetFromOlympian: @olympian_2 {
            @planet_2 -> (@planet_1 . @planet_2);
        }
    }
}

rockyPlanet? {
    Mercury -> true;
    Venus -> true;
    Mars -> true;
    @other -> false;
}

rockyPlanetInTree? {
    (@a . @b) -> rockyPlanetInTree?: @a {
        true -> true;
        false -> rockyPlanetInTree?: @b;
    } 
    @single -> rockyPlanet?: @single;
}

rockyPlanetInList? {
    nil -> false;
    (@first . @rest) -> rockyPlanet?: @first {
        true -> true;
        false -> rockyPlanetInList?: @rest;
    }
}

add {
    (nil . @a) -> @a;
    ((S . @r) . @a) -> add: (@r . (S . @a));
}


// built in: eqAtoms?, identity
// speed, stack size, code size, number of unique atoms used

// required tools: 
//  clipboard
//  sexpr <=> fnk

// wrappedEtcEtc { ... }

// (planetFromOlympian . (
    // ( (atom . hermes) identity (atom . mercury) . return )
    // ( (atom . ares) identity (atom . mars) . return )
    // ...
// ))
// ==
// (compileMap . ( (hermes . mercury) (ares . mars) ... ))

// TODO: change this to 'hardcoded map'
compileMap {
    nil -> nil;
    ((@key . @value) . @rest) -> compileMap: @rest {
        // TODO: what if value is not an atom?
        @rest_compiled -> ( ((atom . @key) identity (atom . @value) . return) . @rest_compiled );
    }
}

compileEqAtoms {
    nil -> ( ((var . @_) identity false return ) . nil );
    (@first . @rest) -> compileEqAtoms: @rest {
        @rest_compiled -> ( (((atom . @key) . (atom . @key)) identity true . return) . @rest_compiled );
    }
}

equal? {
	((@leftleft . @leftright) . (@rightleft . @rightright)) -> equal?: (@leftleft . @rightleft) {
		false -> false;
		true -> equal?: (@leftright . @rightright);
	}
	(@left . @right) -> eqAtoms?: (@left . @right);
}

concat {
    (@a . nil) -> @a;
    (nil . @b) -> @b;
    (@a . (@bh . @br)) -> append: (@bh . @a) {
        @a2 -> concat: (@a2 . @br);
    }
}

append {
    (@element . nil) -> (@element);
    (@element . (@first . @rest)) -> append: (@element . @rest) {
        @new_rest -> (@first . @new_rest);
    }
}

// like concat, but does not fully respect the order
(bindings . combine) {
    (@a . nil) -> @a;
    (nil . @b) -> @b;
    ((@a1 . @a2) . @b) -> (bindings . combine): (@a2 . (@a1 . @b));
}

(bindings . get) {
    ( (atom . @value) . @input) -> eqAtoms?: (@value . @input) {
        false -> false;
        true -> nil;
    }
    ( (var . @value) . @input) -> ((@value . @input) . nil);

    ((@pattern_left . @pattern_right) . (@input_left . @input_right)) -> 
            (bindings . get): (@pattern_left . @input_left) {
        false -> false;
        @bindings_left -> (bindings . get): (@pattern_right . @pattern_right) {
            false -> false;
            @bindings_right -> (bindings . combine): (@bindings_left . @bindings_right);
        }
    }
}

(bindings . apply) {
    ( (atom . @value) . @bindings) -> @value;
    ( (var . @name) . @bindings) -> (dict . lookup): (@bindings . @name);
    ( (@left . @right) . @bindings) -> (bindings . apply): (@left . @bindings) {
        @new_left -> (bindings . apply): (@right . @bindings) {
            @new_right -> (@new_left . @new_right);
        }
    }
}

(dict . lookup) {
	(@key . ((@maybe_key . @maybe_value) . @rest)) -> equal?: (@key . @maybe_key) {
		true -> @maybe_value;
		false -> (dict . lookup): (@key . @rest);
	}
}

interpreter {
    (identity @input . @all_fnks) -> @input;
    (eqAtoms? @input . @all_fnks) -> eqAtoms?: input;
    (@fnk_name @input . @all_fnks) -> (dict . lookup): (@fnk_name . @all_fnks) {
        @fnk_def -> (interpreter . applyCases): (@fnk_def @input @all_fnks . nil);
    }
}

(interpreter . applyCases) {
    ( (@first_case . @rest_cases) @input @all_fnks @parent_bindings ) -> @first_case {
        (@pattern @fnk_name @template . @next) -> (bindings . get): (@pattern . @input) {
            false -> (interpreter . applyCases): ( @rest_cases @input @all_fnks @parent_bindings );
            @local_bindings -> (bindings . combine): (@local_bindings . @parent_bindings) {
                @bindings -> (bindings . apply): (@template . @bindings) {
                    @new_input -> interpreter: ( @fnk_name @new_input . @all_fnks ) {
                        @result -> @rest_cases {
                            return -> @result;
                            @more_cases -> (interpreter . applyCases): ( @more_cases @result @all_fnks @bindings );
                        }
                    }
                }
            }
        }
    }
}

(binary multiply . 10) {
    // 8 * v + 2 * v;
    @v -> (binary . add): ( (b0 b0 b0 . @v) . (b0 . @v) );
}

(binary . add) {
    (nil . @b) -> @b;
    (@a . nil) -> @a;
    ( (b0 . @a_rest) . (@b_first . @b_rest) ) -> (binary . add): (@a_rest . @b_rest) {
        @rest -> (@b_first . @rest);
    }
    ( (@a_first . @a_rest) . (b0 . @b_rest) ) -> (binary . add): (@a_rest . @b_rest) {
        @rest -> (@a_first . @rest);
    }
    ( (b1 . @a_rest) . (b1 . @b_rest) ) -> (binary . add): (@a_rest . @b_rest) {
        @naive_rest -> (binary . inc): @naive_rest {
            @rest -> (b0 . @rest);
        }
    }
}

(binary . inc) {
    nil -> (b1);
    (b0 . @rest) -> (b1 . @rest);
    (b1 . @rest) -> (binary . inc): @rest {
        @new_rest -> (b0 . @new_rest);
    }
}

(binary . dec) {
    nil -> false;
    (b1 . @rest) -> (b0 . @rest);
    (b0 . @rest) -> (binary . dec): @rest {
        false -> false;
        @res -> (b1 . @res);
    }
}

(binary . absDist) {
    (@a . @b) -> (binary signed . sub): (@a . @b) {
        (@sign . @result) -> @result;
    }
}

// sign: isNegative?
// TODO: change the name so it's clear the input is unsigned
(binary signed . sub) {
    (nil . @b) -> (true . @b);
    (@a . nil) -> (false . @a);
    ( (b0 . @a_rest) . (b0 . @b_rest) ) -> (binary signed . sub): (@a_rest . @b_rest) {
        (@sign . @result) -> (@sign b0 . @result);
    }
    ( (b1 . @a_rest) . (b1 . @b_rest) ) -> (binary signed . sub): (@a_rest . @b_rest) {
        (@sign . @result) -> (@sign b0 . @result);
    }
    ( (b1 . @a_rest) . (b0 . @b_rest) ) -> (binary signed . sub): (@a_rest . @b_rest) {
        (@sign . @result) -> (binary signed . inc): (@sign b0 . @result);
    }
    ( (b0 . @a_rest) . (b1 . @b_rest) ) -> (binary signed . sub): (@a_rest . @b_rest) {
        (@sign . @result) -> (binary signed . dec): (@sign b0 . @result);
    }
}

(binary signed . inc) {
    (false . @val) -> (binary . inc): @val {
        @res -> (false . @res);
    }
    (true . @val) -> (binary . dec): @val {
        false -> (false . (b1 . nil));
        @res -> (true . @res);
    }
}

(binary signed . dec) {
    (true . @val) -> (binary . inc): @val {
        @res -> (true . @res);
    }
    (false . @val) -> (binary . dec): @val {
        false -> (true . (b1 . nil));
        @res -> (false . @res);
    }
}

(sort . binary) {
    nil -> nil;
    (@a . @rest) -> (sort . binary): @rest {
        @sorted_rest -> (sort binary . insert): (@a . @sorted_rest);
    }
}

(sort binary . insert) {
    (@val . nil) -> (@val . nil);
    (@val @first . @rest) -> (binary . compare): (@val . @first) {
        less -> (@val @first . @rest);
        equal -> (@val @first . @rest);
        greater -> (sort binary . insert): (@val . @rest) {
            @new_res -> (@first . @new_res);
        }
    }
}

(binary . compare) {
    (@a . @b) -> (binary signed . sub): (@a . @b) {
        (@sign . @value) -> (binary . isZero): @value {
            true -> equal;
            false -> @sign {
                true -> less;
                false -> greater;
            }
        }
    }
}

(binary . isZero) {
    nil -> true;
    (b1 . @rest) -> false;
    (b0 . @rest) -> (binary . isZero): @rest;
}

(advent day1 p1 . raw) {
    @chars -> ((compiled . map) . ( compileMap . (
        (x30 . 0)
        (x31 . 1)
        (x32 . 2)
        (x33 . 3)
        (x34 . 4)
        (x35 . 5)
        (x36 . 6)
        (x37 . 7)
        (x38 . 8)
        (x39 . 9)
        (x20 . SPACE)
        (x0A . NEWLINE)
    ) )): @chars {
        @treated -> (advent day1 . p1): @treated;
    }
}

// (sum (map (zip c1 c2) absDist))
// gets a list of chars
// ./vau save.txt '(advent day1 . p1)' '(3 SPACE SPACE SPACE 4 NEWLINE 4 SPACE SPACE SPACE 3 NEWLINE 2 SPACE SPACE SPACE 5 NEWLINE 1 SPACE SPACE SPACE 3 NEWLINE 3 SPACE SPACE SPACE 9 NEWLINE 3 SPACE SPACE SPACE 3 NEWLINE)'
// ./vau save.txt '(advent day1 . p1)' '(4 1 2 2 6 SPACE SPACE SPACE 6 9 1 9 0 NEWLINE)'
(advent day1 . p1) {
    @chars -> (advent day1 p1 . parseAndConvertToBinaryAnd2Cols): @chars {
        (@col1 . @col2) -> (sort . binary): @col1 {
            @sorted_col1 -> (sort . binary): @col2 {
                // @sorted_col2 -> (@sorted_col1 @sorted_col2);
                @sorted_col2 -> (advent day1 p1 . final): (@sorted_col1 @sorted_col2 . (b0));
            }
        }
    }
}

(advent day1 p1 . parseAndConvertToBinaryAnd2Cols) {
    nil -> (nil . nil);
    (@a SPACE SPACE SPACE @b NEWLINE . @rest) -> (advent day1 p1 . parseAndConvertToBinaryAnd2Cols): @rest {
        (@rest_a . @rest_b) -> (binary . fromHexadecimal): @a {
            @bin_a -> (binary . fromHexadecimal): @b {
                @bin_b -> ( (@bin_a . @rest_a) . (@bin_b . @rest_b) );
            }
        }
    }
    @chars -> (parse hexadecimal until space or newline): @chars {
        (@number_1 SPACE SPACE SPACE . @rest_1) -> (binary . fromHexadecimal): @number_1 {
            @binary_1 -> (parse hexadecimal until space or newline): @rest_1 {
                (@number_2 NEWLINE . @rest_2) -> (binary . fromHexadecimal): @number_2 {
                    @binary_2 -> (advent day1 p1 . parseAndConvertToBinaryAnd2Cols): @rest_2 {
                        (@col_a_rest . @col_b_rest) -> ( (@binary_1 . @col_a_rest) . (@binary_2 . @col_b_rest) );
                    }
                }
            }
        }
    }
}

(parse hexadecimal until space or newline) {
    nil -> (nil . nil);
    (SPACE . @rest) -> (nil . (SPACE . @rest));
    (NEWLINE . @rest) -> (nil . (NEWLINE . @rest));
    (@char . @rest) -> (parse hexadecimal until space or newline): @rest {
        (@val . @real_rest) -> ((@char . @val) . @real_rest);
    }
}

//  ./vau save.txt '(advent day1 p1 . test)' '(6 1 2 3)'
(advent day1 p1 . test) {
    @numbers -> ((compiled . map) . (binary . fromHexadecimal)): @numbers {
        @binary_numbers -> (sort . binary): @binary_numbers {
            @sorted_binary_numbers -> ((compiled . map) . (hexadecimal to . binary)): @sorted_binary_numbers;
        }
    }
}

(compiled . map) {
    @fnk_name -> (
        ((atom . nil) identity (atom . nil) . return)
        (((var . first) . (var . rest)) @fnk_name (var . first) . (
            ((var . mapped_first) ((compiled . map) . @fnk_name) (var . rest) . (
                ((var . mapped_rest) identity ((var . mapped_first) . (var . mapped_rest)) . return)
            ))
        ))
    );
}

(advent day1 p1 . final) {
    (nil nil . @acc) -> (decimal . fromBinary): @acc {
        @r -> reverse: @r;
    }
    // (nil nil . @acc) -> (hexadecimal . fromBinary): @acc;
    ((@c1_first . @c1_rest) (@c2_first . @c2_rest) . @acc) -> (binary . absDist): (@c1_first . @c2_first) {
        @diff -> (binary . add): (@diff . @acc) {
            @new_acc -> (advent day1 p1 . final): (@c1_rest @c2_rest . @new_acc);
        }
    }
}

// ./vau save.txt '(binary . fromHexadecimal)' 1
(binary . fromHexadecimal) {
    (@first . @rest) -> reverse: (@first . @rest) {
        @reversed -> (binary fromHexadecimal . fromReversed): @reversed;
    }
    @digit -> (compileMap . ( 
        (0 . ()) 
        (1 . (b1)) 
        (2 . (b0 b1)) 
        (3 . (b1 b1))
        (4 . (b0 b0 b1))
        (5 . (b1 b0 b1))
        (6 . (b0 b1 b1))
        (7 . (b1 b1 b1))
        (8 . (b0 b0 b0 b1))
        (9 . (b1 b0 b0 b1))
        (a . (b0 b1 b0 b1))
        (b . (b1 b1 b0 b1))
        (c . (b0 b0 b1 b1))
        (d . (b1 b0 b1 b1))
        (e . (b0 b1 b1 b1))
        (f . (b1 b1 b1 b1))
    )): @digit;
}

reverse {
    nil -> nil;
    (@first . @rest) -> reverse: @rest {
        @new_rest -> append: (@first . @new_rest);
    }
}

(binary fromHexadecimal . fromReversed) {
    nil -> nil;
    (@last . @rest) -> (binary fromHexadecimal . fromReversed): @rest {
        @rest_binary -> (binary multiply . 10): @rest_binary {
            @rest_scaled -> (binary . fromHexadecimal): @last {
                @last_binary -> (binary . add): (@last_binary . @rest_scaled);
            }
        }
    }
}

(binary . removeLeadingZeros) {
    nil -> nil;
    (b0) -> nil;
    (b1) -> (b1);
    (b0 . @rest) -> (binary . removeLeadingZeros): @rest {
        nil -> nil;
        @new_rest -> (b0 . @new_rest);
    }
    (b1 . @rest) -> (binary . removeLeadingZeros): @rest {
        @new_rest -> (b1 . @new_rest);
    }
}

(hexadecimal . fromBinary) {
    nil -> nil;
    @raw_stuff -> (binary . removeLeadingZeros): @raw_stuff {
        (@a @b @c @d @e . @rest) -> (hexadecimal . fromBinary): (@a @b @c @d) {
            (@first) -> (hexadecimal . fromBinary): (@e . @rest) {
                @xx -> (@first . @xx);
            }
        }
        @stuff -> (compileMap . ( 
            (() . (0) ) 
            ((b1) . (1) ) 
            ((b0 b1) . (2) ) 
            ((b1 b1) . (3) )
            ((b0 b0 b1) . (4) )
            ((b1 b0 b1) . (5) )
            ((b0 b1 b1) . (6) )
            ((b1 b1 b1) . (7) )
            ((b0 b0 b0 b1) . (8) )
            ((b1 b0 b0 b1) . (9) )
            ((b0 b1 b0 b1) . (a) )
            ((b1 b1 b0 b1) . (b) )
            ((b0 b0 b1 b1) . (c) )
            ((b1 b0 b1 b1) . (d) )
            ((b0 b1 b1 b1) . (e) )
            ((b1 b1 b1 b1) . (f) )
        )): @stuff;
    }
}

(decimal . multiplyByTwo) {
    nil -> nil;
    (0 . @rest) -> (decimal . multiplyByTwo): @rest {
        @b -> (0 . @b);
    }
    (1 . @rest) -> (decimal . multiplyByTwo): @rest {
        @b -> (2 . @b);
    }
    (2 . @rest) -> (decimal . multiplyByTwo): @rest {
        @b -> (4 . @b);
    }
    (3 . @rest) -> (decimal . multiplyByTwo): @rest {
        @b -> (6 . @b);
    }
    (4 . @rest) -> (decimal . multiplyByTwo): @rest {
        @b -> (8 . @b);
    }
    (5 . @rest) -> (decimal . multiplyByTwo): @rest {
        @b -> (decimal . inc): @b {
            @c -> (0 . @c);
        }
    }
    (6 . @rest) -> (decimal . multiplyByTwo): @rest {
        @b -> (decimal . inc): @b {
            @c -> (2 . @c);
        }
    }
    (7 . @rest) -> (decimal . multiplyByTwo): @rest {
        @b -> (decimal . inc): @b {
            @c -> (4 . @c);
        }
    }
    (8 . @rest) -> (decimal . multiplyByTwo): @rest {
        @b -> (decimal . inc): @b {
            @c -> (6 . @c);
        }
    }
    (9 . @rest) -> (decimal . multiplyByTwo): @rest {
        @b -> (decimal . inc): @b {
            @c -> (8 . @c);
        }
    }
}

// TODO: comptime magic
(decimal . inc) {
    nil -> (1);
    (0 . @rest) -> (1 . @rest);
    (1 . @rest) -> (2 . @rest);
    (2 . @rest) -> (3 . @rest);
    (3 . @rest) -> (4 . @rest);
    (4 . @rest) -> (5 . @rest);
    (5 . @rest) -> (6 . @rest);
    (6 . @rest) -> (7 . @rest);
    (7 . @rest) -> (8 . @rest);
    (8 . @rest) -> (9 . @rest);
    (9 . @rest) -> (decimal . inc): @rest {
        @rest2 -> (0 . @rest2);
    }
}

(decimal . fromBinary) {
    nil -> nil;
    (b0 . @rest) -> (decimal . fromBinary): @rest {
        @rest2 -> (decimal . multiplyByTwo): @rest2;
    }
    (b1 . @rest) -> (decimal . fromBinary): @rest {
        @rest2 -> (decimal . multiplyByTwo): @rest2 {
            @rest3 -> (decimal . inc): @rest3;
        }
    }


    // @raw_stuff -> (binary . removeLeadingZeros): @raw_stuff {
        // () -> (0);
        // (b1) -> (1);
        // (b0 b1) -> (2);
        // (b1 b1) -> (3);
        // (b0 b0 b1) -> (4);
        // (b1 b0 b1) -> (5);
        // (b0 b1 b1) -> (6);
        // (b1 b1 b1) -> (7);
        // (b0 b0 b0 b1) -> (8);
        // (b1 b0 b0 b1) -> (9);
    // }
}

// 3   4
// 4   3
// 2   5
// 1   3
// 3   9
// 3   3
// ->
// (3 SPACE SPACE SPACE 4 NEWLINE 4 SPACE SPACE SPACE 3 NEWLINE 2 SPACE SPACE SPACE 5 NEWLINE 1 SPACE SPACE SPACE 3 NEWLINE 3 SPACE SPACE SPACE 9 NEWLINE 3 SPACE SPACE SPACE 3 NEWLINE)



addDecimals {
    (@raw_a . @raw_b) -> (): @raw_a {
        @a -> reverse: @raw_b {
            @b -> (decimal . add): (@a . @b) {
                @c -> reverse: @c;
            }
        }
    }
    // (@raw_a . @raw_b) -> (compile . 
        // (reverse ((decimal.add) (reverse 2) (reverse 1)))
    // ): (@raw_a . @raw_b);
}

(decimal . multiplyByTwo) {
    nil -> nil;
    (0 . @rest) -> (decimal . multiplyByTwo): @rest {
        @b -> (0 . @b);
    }
    (1 . @rest) -> (decimal . multiplyByTwo): @rest {
        @b -> (2 . @b);
    }
    (2 . @rest) -> (decimal . multiplyByTwo): @rest {
        @b -> (4 . @b);
    }
    (3 . @rest) -> (decimal . multiplyByTwo): @rest {
        @b -> (6 . @b);
    }
    (4 . @rest) -> (decimal . multiplyByTwo): @rest {
        @b -> (8 . @b);
    }
    (5 . @rest) -> (decimal . multiplyByTwo): @rest {
        @b -> (decimal . inc): @b {
            @c -> (0 . @c);
        }
    }
    (6 . @rest) -> (decimal . multiplyByTwo): @rest {
        @b -> (decimal . inc): @b {
            @c -> (2 . @c);
        }
    }
    (7 . @rest) -> (decimal . multiplyByTwo): @rest {
        @b -> (decimal . inc): @b {
            @c -> (4 . @c);
        }
    }
    (8 . @rest) -> (decimal . multiplyByTwo): @rest {
        @b -> (decimal . inc): @b {
            @c -> (6 . @c);
        }
    }
    (9 . @rest) -> (decimal . multiplyByTwo): @rest {
        @b -> (decimal . inc): @b {
            @c -> (8 . @c);
        }
    }
}

// TODO: comptime magic
(decimal . inc) {
    nil -> (1);
    (0 . @rest) -> (1 . @rest);
    (1 . @rest) -> (2 . @rest);
    (2 . @rest) -> (3 . @rest);
    (3 . @rest) -> (4 . @rest);
    (4 . @rest) -> (5 . @rest);
    (5 . @rest) -> (6 . @rest);
    (6 . @rest) -> (7 . @rest);
    (7 . @rest) -> (8 . @rest);
    (8 . @rest) -> (9 . @rest);
    (9 . @rest) -> (decimal . inc): @rest {
        @rest2 -> (0 . @rest2);
    }
}

(decimal from . binary) {
    nil -> nil;
    (b0 . @rest) -> (decimal from . binary): @rest {
        @rest2 -> (decimal . multiplyByTwo): @rest2;
    }
    (b1 . @rest) -> (decimal from . binary): @rest {
        @rest2 -> (decimal . multiplyByTwo): @rest2 {
            @rest3 -> (decimal . inc): @rest3;
        }
    }
}

(binary . removeLeadingZeros) {
    nil -> nil;
    (b0) -> nil;
    (b1) -> (b1);
    (b0 . @rest) -> (binary . removeLeadingZeros): @rest {
        nil -> nil;
        @new_rest -> (b0 . @new_rest);
    }
    (b1 . @rest) -> (binary . removeLeadingZeros): @rest {
        @new_rest -> (b1 . @new_rest);
    }
}

(binary from . decimal) {
    nil -> nil;
    (@first . @rest) -> reverse: (@first . @rest) {
        @reversed -> (binary fromHexadecimal . fromReversed): @reversed;
    }
    @digit -> (compileMap . ( 
        (0 . ()) 
        (1 . (b1)) 
        (2 . (b0 b1)) 
        (3 . (b1 b1))
        (4 . (b0 b0 b1))
        (5 . (b1 b0 b1))
        (6 . (b0 b1 b1))
        (7 . (b1 b1 b1))
        (8 . (b0 b0 b0 b1))
        (9 . (b1 b0 b0 b1))
        (a . (b0 b1 b0 b1))
        (b . (b1 b1 b0 b1))
        (c . (b0 b0 b1 b1))
        (d . (b1 b0 b1 b1))
        (e . (b0 b1 b1 b1))
        (f . (b1 b1 b1 b1))
    )): @digit;
}

(binary fromHexadecimal . fromReversed) {
    nil -> nil;
    (@last . @rest) -> (binary fromHexadecimal . fromReversed): @rest {
        @rest_binary -> (binary multiply . 10): @rest_binary {
            @rest_scaled -> (binary . fromHexadecimal): @last {
                @last_binary -> (binary . add): (@last_binary . @rest_scaled);
            }
        }
    }
}

// TODO: change this to 'hardcoded map'
compileMap {
    nil -> nil;
    ((@key . @value) . @rest) -> compileMap: @rest {
        // TODO: what if value is not an atom?
        @rest_compiled -> ( ((atom . @key) identity (atom . @value) . return) . @rest_compiled );
    }
}

compileEqAtoms {
    nil -> ( ((var . @_) identity false return ) . nil );
    (@first . @rest) -> compileEqAtoms: @rest {
        @rest_compiled -> ( (((atom . @key) . (atom . @key)) identity true . return) . @rest_compiled );
    }
}

equal? {
	((@leftleft . @leftright) . (@rightleft . @rightright)) -> equal?: (@leftleft . @rightleft) {
		false -> false;
		true -> equal?: (@leftright . @rightright);
	}
	(@left . @right) -> eqAtoms?: (@left . @right);
}

concat {
    (@a . nil) -> @a;
    (nil . @b) -> @b;
    (@a . (@bh . @br)) -> append: (@bh . @a) {
        @a2 -> concat: (@a2 . @br);
    }
}

append {
    (@element . nil) -> (@element);
    (@element . (@first . @rest)) -> append: (@element . @rest) {
        @new_rest -> (@first . @new_rest);
    }
}

// like concat, but does not fully respect the order
(bindings . combine) {
    (@a . nil) -> @a;
    (nil . @b) -> @b;
    ((@a1 . @a2) . @b) -> (bindings . combine): (@a2 . (@a1 . @b));
}

(bindings . get) {
    ( (atom . @value) . @input) -> eqAtoms?: (@value . @input) {
        false -> false;
        true -> nil;
    }
    ( (var . @value) . @input) -> ((@value . @input) . nil);

    ((@pattern_left . @pattern_right) . (@input_left . @input_right)) -> 
            (bindings . get): (@pattern_left . @input_left) {
        false -> false;
        @bindings_left -> (bindings . get): (@pattern_right . @pattern_right) {
            false -> false;
            @bindings_right -> (bindings . combine): (@bindings_left . @bindings_right);
        }
    }
}

(bindings . apply) {
    ( (atom . @value) . @bindings) -> @value;
    ( (var . @name) . @bindings) -> (dict . lookup): (@bindings . @name);
    ( (@left . @right) . @bindings) -> (bindings . apply): (@left . @bindings) {
        @new_left -> (bindings . apply): (@right . @bindings) {
            @new_right -> (@new_left . @new_right);
        }
    }
}

(dict . lookup) {
	(@key . ((@maybe_key . @maybe_value) . @rest)) -> equal?: (@key . @maybe_key) {
		true -> @maybe_value;
		false -> (dict . lookup): (@key . @rest);
	}
}

interpreter {
    (identity @input . @all_fnks) -> @input;
    (eqAtoms? @input . @all_fnks) -> eqAtoms?: input;
    (@fnk_name @input . @all_fnks) -> (dict . lookup): (@fnk_name . @all_fnks) {
        @fnk_def -> (interpreter . applyCases): (@fnk_def @input @all_fnks . nil);
    }
}

(interpreter . applyCases) {
    ( (@first_case . @rest_cases) @input @all_fnks @parent_bindings ) -> @first_case {
        (@pattern @fnk_name @template . @next) -> (bindings . get): (@pattern . @input) {
            false -> (interpreter . applyCases): ( @rest_cases @input @all_fnks @parent_bindings );
            @local_bindings -> (bindings . combine): (@local_bindings . @parent_bindings) {
                @bindings -> (bindings . apply): (@template . @bindings) {
                    @new_input -> interpreter: ( @fnk_name @new_input . @all_fnks ) {
                        @result -> @rest_cases {
                            return -> @result;
                            @more_cases -> (interpreter . applyCases): ( @more_cases @result @all_fnks @bindings );
                        }
                    }
                }
            }
        }
    }
}

(binary multiply . 10) {
    // 8 * v + 2 * v;
    @v -> (binary . add): ( (b0 b0 b0 . @v) . (b0 . @v) );
}

(binary . add) {
    (nil . @b) -> @b;
    (@a . nil) -> @a;
    ( (b0 . @a_rest) . (@b_first . @b_rest) ) -> (binary . add): (@a_rest . @b_rest) {
        @rest -> (@b_first . @rest);
    }
    ( (@a_first . @a_rest) . (b0 . @b_rest) ) -> (binary . add): (@a_rest . @b_rest) {
        @rest -> (@a_first . @rest);
    }
    ( (b1 . @a_rest) . (b1 . @b_rest) ) -> (binary . add): (@a_rest . @b_rest) {
        @naive_rest -> (binary . inc): @naive_rest {
            @rest -> (b0 . @rest);
        }
    }
}

(binary . inc) {
    nil -> (b1);
    (b0 . @rest) -> (b1 . @rest);
    (b1 . @rest) -> (binary . inc): @rest {
        @new_rest -> (b0 . @new_rest);
    }
}

(binary . dec) {
    nil -> false;
    (b1 . @rest) -> (b0 . @rest);
    (b0 . @rest) -> (binary . dec): @rest {
        false -> false;
        @res -> (b1 . @res);
    }
}

(binary . absDist) {
    (@a . @b) -> (binary signed . sub): (@a . @b) {
        (@sign . @result) -> @result;
    }
}

// sign: isNegative?
// TODO: change the name so it's clear the input is unsigned
(binary signed . sub) {
    (nil . @b) -> (true . @b);
    (@a . nil) -> (false . @a);
    ( (b0 . @a_rest) . (b0 . @b_rest) ) -> (binary signed . sub): (@a_rest . @b_rest) {
        (@sign . @result) -> (@sign b0 . @result);
    }
    ( (b1 . @a_rest) . (b1 . @b_rest) ) -> (binary signed . sub): (@a_rest . @b_rest) {
        (@sign . @result) -> (@sign b0 . @result);
    }
    ( (b1 . @a_rest) . (b0 . @b_rest) ) -> (binary signed . sub): (@a_rest . @b_rest) {
        (@sign . @result) -> (binary signed . inc): (@sign b0 . @result);
    }
    ( (b0 . @a_rest) . (b1 . @b_rest) ) -> (binary signed . sub): (@a_rest . @b_rest) {
        (@sign . @result) -> (binary signed . dec): (@sign b0 . @result);
    }
}

(binary signed . inc) {
    (false . @val) -> (binary . inc): @val {
        @res -> (false . @res);
    }
    (true . @val) -> (binary . dec): @val {
        false -> (false . (b1 . nil));
        @res -> (true . @res);
    }
}

(binary signed . dec) {
    (true . @val) -> (binary . inc): @val {
        @res -> (true . @res);
    }
    (false . @val) -> (binary . dec): @val {
        false -> (true . (b1 . nil));
        @res -> (false . @res);
    }
}

(sort . binary) {
    nil -> nil;
    (@a . @rest) -> (sort . binary): @rest {
        @sorted_rest -> (sort binary . insert): (@a . @sorted_rest);
    }
}

(sort binary . insert) {
    (@val . nil) -> (@val . nil);
    (@val @first . @rest) -> (binary . compare): (@val . @first) {
        less -> (@val @first . @rest);
        equal -> (@val @first . @rest);
        greater -> (sort binary . insert): (@val . @rest) {
            @new_res -> (@first . @new_res);
        }
    }
}

(binary . compare) {
    (@a . @b) -> (binary signed . sub): (@a . @b) {
        (@sign . @value) -> (binary . isZero): @value {
            true -> equal;
            false -> @sign {
                true -> less;
                false -> greater;
            }
        }
    }
}

(binary . isZero) {
    nil -> true;
    (b1 . @rest) -> false;
    (b0 . @rest) -> (binary . isZero): @rest;
}

(compiled . map) {
    @fnk_name -> (
        ((atom . nil) identity (atom . nil) . return)
        (((var . first) . (var . rest)) @fnk_name (var . first) . (
            ((var . mapped_first) ((compiled . map) . @fnk_name) (var . rest) . (
                ((var . mapped_rest) identity ((var . mapped_first) . (var . mapped_rest)) . return)
            ))
        ))
    );
}

reverse {
    nil -> nil;
    (@first . @rest) -> reverse: @rest {
        @new_rest -> append: (@first . @new_rest);
    }
}

(binary fromHexadecimal . fromReversed) {
    nil -> nil;
    (@last . @rest) -> (binary fromHexadecimal . fromReversed): @rest {
        @rest_binary -> (binary multiply . 10): @rest_binary {
            @rest_scaled -> (binary . fromHexadecimal): @last {
                @last_binary -> (binary . add): (@last_binary . @rest_scaled);
            }
        }
    }
}

(binary . removeLeadingZeros) {
    nil -> nil;
    (b0) -> nil;
    (b1) -> (b1);
    (b0 . @rest) -> (binary . removeLeadingZeros): @rest {
        nil -> nil;
        @new_rest -> (b0 . @new_rest);
    }
    (b1 . @rest) -> (binary . removeLeadingZeros): @rest {
        @new_rest -> (b1 . @new_rest);
    }
}

(hexadecimal . fromBinary) {
    nil -> nil;
    @raw_stuff -> (binary . removeLeadingZeros): @raw_stuff {
        (@a @b @c @d @e . @rest) -> (hexadecimal . fromBinary): (@a @b @c @d) {
            (@first) -> (hexadecimal . fromBinary): (@e . @rest) {
                @xx -> (@first . @xx);
            }
        }
        @stuff -> (compileMap . ( 
            (() . (0) ) 
            ((b1) . (1) ) 
            ((b0 b1) . (2) ) 
            ((b1 b1) . (3) )
            ((b0 b0 b1) . (4) )
            ((b1 b0 b1) . (5) )
            ((b0 b1 b1) . (6) )
            ((b1 b1 b1) . (7) )
            ((b0 b0 b0 b1) . (8) )
            ((b1 b0 b0 b1) . (9) )
            ((b0 b1 b0 b1) . (a) )
            ((b1 b1 b0 b1) . (b) )
            ((b0 b0 b1 b1) . (c) )
            ((b1 b0 b1 b1) . (d) )
            ((b0 b1 b1 b1) . (e) )
            ((b1 b1 b1 b1) . (f) )
        )): @stuff;
    }
}

(decimal . multiplyByTwo) {
    nil -> nil;
    (0 . @rest) -> (decimal . multiplyByTwo): @rest {
        @b -> (0 . @b);
    }
    (1 . @rest) -> (decimal . multiplyByTwo): @rest {
        @b -> (2 . @b);
    }
    (2 . @rest) -> (decimal . multiplyByTwo): @rest {
        @b -> (4 . @b);
    }
    (3 . @rest) -> (decimal . multiplyByTwo): @rest {
        @b -> (6 . @b);
    }
    (4 . @rest) -> (decimal . multiplyByTwo): @rest {
        @b -> (8 . @b);
    }
    (5 . @rest) -> (decimal . multiplyByTwo): @rest {
        @b -> (decimal . inc): @b {
            @c -> (0 . @c);
        }
    }
    (6 . @rest) -> (decimal . multiplyByTwo): @rest {
        @b -> (decimal . inc): @b {
            @c -> (2 . @c);
        }
    }
    (7 . @rest) -> (decimal . multiplyByTwo): @rest {
        @b -> (decimal . inc): @b {
            @c -> (4 . @c);
        }
    }
    (8 . @rest) -> (decimal . multiplyByTwo): @rest {
        @b -> (decimal . inc): @b {
            @c -> (6 . @c);
        }
    }
    (9 . @rest) -> (decimal . multiplyByTwo): @rest {
        @b -> (decimal . inc): @b {
            @c -> (8 . @c);
        }
    }
}

// TODO: comptime magic
(decimal . inc) {
    nil -> (1);
    (0 . @rest) -> (1 . @rest);
    (1 . @rest) -> (2 . @rest);
    (2 . @rest) -> (3 . @rest);
    (3 . @rest) -> (4 . @rest);
    (4 . @rest) -> (5 . @rest);
    (5 . @rest) -> (6 . @rest);
    (6 . @rest) -> (7 . @rest);
    (7 . @rest) -> (8 . @rest);
    (8 . @rest) -> (9 . @rest);
    (9 . @rest) -> (decimal . inc): @rest {
        @rest2 -> (0 . @rest2);
    }
}

(decimal . fromBinary) {
    nil -> nil;
    (b0 . @rest) -> (decimal . fromBinary): @rest {
        @rest2 -> (decimal . multiplyByTwo): @rest2;
    }
    (b1 . @rest) -> (decimal . fromBinary): @rest {
        @rest2 -> (decimal . multiplyByTwo): @rest2 {
            @rest3 -> (decimal . inc): @rest3;
        }
    }


    // @raw_stuff -> (binary . removeLeadingZeros): @raw_stuff {
        // () -> (0);
        // (b1) -> (1);
        // (b0 b1) -> (2);
        // (b1 b1) -> (3);
        // (b0 b0 b1) -> (4);
        // (b1 b0 b1) -> (5);
        // (b0 b1 b1) -> (6);
        // (b1 b1 b1) -> (7);
        // (b0 b0 b0 b1) -> (8);
        // (b1 b0 b0 b1) -> (9);
    // }
}

// 3   4
// 4   3
// 2   5
// 1   3
// 3   9
// 3   3
// ->
// (3 SPACE SPACE SPACE 4 NEWLINE 4 SPACE SPACE SPACE 3 NEWLINE 2 SPACE SPACE SPACE 5 NEWLINE 1 SPACE SPACE SPACE 3 NEWLINE 3 SPACE SPACE SPACE 9 NEWLINE 3 SPACE SPACE SPACE 3 NEWLINE)
